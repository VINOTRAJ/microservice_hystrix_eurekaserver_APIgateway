1) Spring Core Annotations

1.1) @Configuration    ->used on classes that define beans,is a configuration by itself and will have methods to instantiate and configure the dependencies.


1.2) @ComponentScan ->@ComponentScan is used with the @Configuration annotation to allow Spring to know the packages to scan for annotated components. 

1.3) @Autowired     ->@Autowired is used to mark a dependency which Spring is going to resolve and inject automatically. We can use this annotation with a constructor, setter, or field injection.

1.4) @Component ->is used on classes to indicate a Spring component. The @Component annotation marks the Java class as a bean or component so that the component-scanning mechanism of Spring can add it into the application context.

1.5) @Bean   ->It is a method-level annotation. It is an alternative of XML <bean> tag. It tells the method to produce a bean to be managed by Spring Container.

1.6) @Qualifier -> helps fine-tune annotation-based autowiring. There may be scenarios when we create more than one bean of the same type and want to wire only one of them with a property. This can be controlled using @Qualifier annotation along with the @Autowired annotation.

1.7) @Primary ->to give higher preference to a bean when there are multiple beans of the same type.

1.8) @Required    ->The @Required annotation is method-level annotation, and shows that the setter method must be configured to be dependency-injected with a value at configuration time.
@Required on setter methods to mark dependencies we want to populate through XML; Otherwise, BeanInitializationException will be thrown.

1.9) @Value     -> is used to assign default values to variables and method arguments.
for injecting property values into beans. It’s compatible with the constructor, setter, and field injection.



1.10) @Lazy ->@Lazy makes beans to initialize lazily.

1.11) @Import  ->@Import allows to use specific @Configuration classes without component scanning. We can provide those classes with @Import‘s value argument.





2) Spring MVC Annotations

2.1) @Controller      ->The @Controller is a class-level annotation. It is a specialization of @Component. It marks a class as a web request handler. It is often used to serve web pages. By default, it returns a string that indicates which route to redirect. It is mostly used with @RequestMapping annotation.


2.2) @Service         ->@Service marks a Java class that performs some service, such as executing business logic, performing calculations, and calling external APIs

2.3) @Repository -> This annotation is used on Java classes that directly access the database. The @Repository annotation works as a marker for any class that fulfills the role of repository or Data Access Object. 

2.4) @RequestMapping   ->It is used to map the web requests. It has many optional elements like consumes, header, method, name, params, path, produces, and value. We use it with the class as well as the method




2.5) @RequestBody      ->@RequestBody indicates a method parameter should be bound to the body of the web request. It maps the body of the HTTP request to an object. The body of the request is passed through an HttpMessageConverter to resolve the method argument depending on the content type of the request. 


2.6) @GetMapping
It maps the HTTP GET requests on the specific handler method. It is used to create a web service endpoint that fetches It is used instead of using: @RequestMapping(method = RequestMethod.GET)

2.7) @PostMapping
It maps the HTTP POST requests on the specific handler method. It is used to create a web service endpoint that creates It is used instead of using: @RequestMapping(method = RequestMethod.POST)

2.8) @PutMapping
It maps the HTTP PUT requests on the specific handler method. It is used to create a web service endpoint that creates or updates It is used instead of using: @RequestMapping(method = RequestMethod.PUT)

2.9) @DeleteMapping
It maps the HTTP DELETE requests on the specific handler method. It is used to create a web service endpoint that deletes a resource. It is used instead of using: @RequestMapping(method = RequestMethod.DELETE)

2.10) @PatchMapping

2.11) @ResponseBody     
It binds the method return value to the response body. It tells the Spring Boot Framework to serialize a return an object into JSON and XML format.

2.12) @ExceptionHandler    
@ExceptionHandler is used to declare a custom error handler method. Spring calls this method when a request handler method throws any of the specified exceptions.
The caught exception can be passed to the method as an argument.

2.13) @ResponseStatus        
@ResponseStatus is used to specify the desired HTTP status of the response if we annotate a request handler method with this annotation. We can declare the status code with the code argument, or its alias, the value argument.

2.14) @PathVariable ->It is used to extract the values from the URI.

2.15) @RequestParam->It is used to extract the query parameters form the URL. It is also known as a query parameter. It is most suitable for web applications. It can specify default values if the query parameter is not present in the URL.

2.16) @RestController   
@RestController combines @Controller and @ResponseBody. By annotating the controller class with @RestController annotation, we no longer need to add @ResponseBody to all the request mapping methods.





ApplicationContext:

ApplicationContext is a corner stone of a Spring Boot application. It represents the Spring IoC container and is responsible for instantiating, configuring, and assembling the beans. The container gets its instructions on what objects to instantiate, configure, and assemble by reading configuration metadata

